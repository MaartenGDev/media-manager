(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["mediaManager"] = factory();
	else
		root["mediaManager"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _deepmerge = __webpack_require__(1);

var _deepmerge2 = _interopRequireDefault(_deepmerge);

__webpack_require__(2);

var _css = __webpack_require__(3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MediaManager = function () {
  function MediaManager() {
    _classCallCheck(this, MediaManager);
  }

  _createClass(MediaManager, [{
    key: 'buildWrapper',
    value: function buildWrapper() {
      var settings = this.settings;

      var wrapper = document.createElement('section');

      wrapper.classList.add(settings.classes.wrapper);

      return wrapper;
    }
  }, {
    key: '_buildHeader',
    value: function _buildHeader() {
      var settings = this.settings;

      var header = document.createElement('section');
      header.classList.add(settings.classes.header);

      var title = document.createElement('p');
      title.classList.add(settings.classes.headerTitle);

      var text = document.createTextNode(settings.names.title);

      title.appendChild(text);

      header.appendChild(title);

      return header;
    }
  }, {
    key: '_buildActionBar',
    value: function _buildActionBar() {
      var settings = this.settings;

      var uploadButton = document.createElement('input');
      uploadButton.setAttribute('type', 'file');

      uploadButton = (0, _css.addClassesToNode)(uploadButton, settings.classes.uploadButton);
      uploadButton.appendChild(document.createTextNode('Upload'));

      var actionBar = document.createElement('section');
      actionBar = (0, _css.addClassesToNode)(actionBar, settings.classes.actionBar);
      actionBar.appendChild(uploadButton);

      return actionBar;
    }
  }, {
    key: '_buildResourcePreviews',
    value: function _buildResourcePreviews() {
      var settings = this.settings;

      var wrapper = document.createElement('section');
      wrapper.classList.add(settings.classes.contentWrapper);

      var resources = settings.source.resources.map(function (resource) {
        var path = resource.path;

        var gridItem = document.createElement('section');
        gridItem.classList.add(settings.classes.item);
        gridItem.dataset.src = path;

        gridItem.style.backgroundImage = 'url(\'' + path + '\')';
        gridItem.style.backgroundSize = 'cover';
        gridItem.style.backgroundRepeat = 'no-repeat';

        return gridItem;
      });

      resources.forEach(function (x) {
        return wrapper.appendChild(x);
      });

      return wrapper;
    }
  }, {
    key: '_buildFooter',
    value: function _buildFooter() {
      var settings = this.settings;
      var footer = document.createElement('section');
      footer.classList.add(settings.classes.footer);

      var confirmButton = document.createElement('button');
      confirmButton.setAttribute('type', 'button');
      confirmButton = (0, _css.addClassesToNode)(confirmButton, settings.classes.confirmButton);
      confirmButton.appendChild(document.createTextNode('Confirm'));

      var cancelButton = document.createElement('button');
      cancelButton.setAttribute('type', 'button');
      cancelButton = (0, _css.addClassesToNode)(cancelButton, settings.classes.cancelButton);
      cancelButton.appendChild(document.createTextNode('Cancel'));

      footer.appendChild(confirmButton);
      footer.appendChild(cancelButton);

      return footer;
    }
  }, {
    key: '_buildOverlay',
    value: function _buildOverlay() {
      var overlaySection = document.createElement('section');
      overlaySection = (0, _css.addClassesToNode)(overlaySection, this.settings.classes.overlay);

      return overlaySection;
    }
  }, {
    key: '_appendOverlayIfNotPresent',
    value: function _appendOverlayIfNotPresent() {
      var overlaySelector = document.querySelector((0, _css.createSelector)(this.settings.classes.overlay));
      if (overlaySelector !== null) return;

      var overlay = this._buildOverlay();

      document.querySelector('body').appendChild(overlay);
    }
  }, {
    key: '_toggleOverlay',
    value: function _toggleOverlay(mediaManagerIsShown) {
      this._appendOverlayIfNotPresent();
      var overlaySelector = document.querySelector((0, _css.createSelector)(this.settings.classes.overlay));

      overlaySelector.classList.toggle(this.settings.classes.activeOverlay, mediaManagerIsShown);
    }
  }, {
    key: '_deleteMediaManager',
    value: function _deleteMediaManager() {
      this.settings.state.isShown = false;
      this.settings.elements.wrapper.innerHTML = '';
    }
  }, {
    key: '_toggleMediaManager',
    value: function _toggleMediaManager() {
      var settings = this.settings;
      var isShown = settings.state.isShown;


      if (settings.settings.showOverlay) {
        this._toggleOverlay(!isShown);
      }

      if (isShown) return this._deleteMediaManager(settings);

      var wrapper = this.buildWrapper();

      wrapper.appendChild(this._buildHeader());
      wrapper.appendChild(this._buildActionBar());
      wrapper.appendChild(this._buildResourcePreviews());
      wrapper.appendChild(this._buildFooter());

      settings.elements.wrapper.appendChild(wrapper);

      this._registerEventListenersForMediaActions();
      this._registerEventListenersForActionBar();

      this.settings.state.isShown = true;
    }
  }, {
    key: '_registerEventListenersForActionBar',
    value: function _registerEventListenersForActionBar() {
      var settings = this.settings;
      var uploadSelector = (0, _css.createSelector)(settings.classes.uploadButton);

      document.querySelector(uploadSelector).addEventListener('change', settings.events.onFileSelectionChanged);
    }
  }, {
    key: '_registerEventListenersForMediaActions',
    value: function _registerEventListenersForMediaActions() {
      var _this = this;

      var settings = this.settings;
      var selectedResources = [];

      settings.elements.wrapper.addEventListener('click', function (_ref) {
        var target = _ref.target;

        if (target.classList.contains(settings.classes.item)) {
          var hasSelectedMaxItems = selectedResources.length === settings.settings.maxSelectedItems;

          var path = target.dataset.src;
          var hasBeenSelected = selectedResources.filter(function (resource) {
            return resource.path === path;
          }).length > 0;

          if (hasBeenSelected) {
            selectedResources = selectedResources.filter(function (resource) {
              return resource.path !== path;
            });

            target.classList.toggle(settings.classes.activeItem, false);
          } else if (!hasSelectedMaxItems) {
            selectedResources = [].concat(_toConsumableArray(selectedResources), [settings.source.resources.find(function (resource) {
              return resource.path === path;
            })]);

            target.classList.toggle(settings.classes.activeItem, true);
          }
        }
      });

      var confirmSelector = (0, _css.createSelector)(settings.classes.confirmButton);
      var cancelSelector = (0, _css.createSelector)(settings.classes.cancelButton);

      document.querySelector(confirmSelector).addEventListener('click', function () {
        settings.events.onConfirm(selectedResources);
        _this._toggleMediaManager();
      });

      document.querySelector(cancelSelector).addEventListener('click', function (evt) {
        evt.preventDefault();
        settings.events.onCancel();
        _this._toggleMediaManager();
      });
    }
  }, {
    key: 'on',
    value: function on(eventName, callback) {
      this.settings.events[eventName] = callback;
    }
  }, {
    key: 'toggle',
    value: function toggle() {
      this._toggleMediaManager();
    }
  }, {
    key: '_isValidResource',
    value: function _isValidResource(resource) {
      return (typeof resource === 'undefined' ? 'undefined' : _typeof(resource)) === 'object' && resource.hasOwnProperty('path');
    }
  }, {
    key: 'add',
    value: function add(resource) {
      if (!this._isValidResource(resource)) return console.error('The resource has to be an object with a path key.');
      var _settings$classes = this.settings.classes,
          wrapper = _settings$classes.wrapper,
          contentWrapper = _settings$classes.contentWrapper;


      var wrapperSelector = (0, _css.createSelector)(wrapper);
      var contentWrapperSelector = (0, _css.createSelector)(contentWrapper);

      this.settings.source.resources = [].concat(_toConsumableArray(this.settings.source.resources), [resource]);

      if (this.settings.state.isShown) {
        document.querySelector(wrapperSelector + ' ' + contentWrapperSelector).outerHTML = this._buildResourcePreviews().outerHTML;
      }
    }
  }, {
    key: 'init',
    value: function init(settings) {
      settings = (0, _deepmerge2.default)({
        elements: {
          wrapper: ''
        },
        state: {
          isShown: false
        },
        settings: {
          showOverlay: true,
          maxSelectedItems: -1
        },
        classes: {
          wrapper: 'media-manager',
          overlay: 'media-manager__overlay',
          activeOverlay: 'media-manager__overlay--active',
          header: 'media-manager__header',
          headerTitle: 'media-manager__title',
          contentWrapper: 'media-manager__content',
          item: 'media-manager__item',
          activeItem: 'media-manager__item--active',
          footer: 'media-manager__footer',
          actionBar: 'media-manager__action-bar',
          confirmButton: ['media-manager__button', 'media-manager__button--confirm'],
          cancelButton: ['media-manager__button', 'media-manager__button--cancel'],
          uploadButton: ['media-manager__button', 'media-manager__button--upload']
        },
        names: {
          title: 'Media Manager'
        },
        events: {
          onCancel: function onCancel() {},
          onConfirm: function onConfirm() {},
          onFileSelectionChanged: function onFileSelectionChanged() {}
        },
        source: {
          resources: []
        }
      }, settings);

      this.settings = settings;
    }
  }]);

  return MediaManager;
}();

exports.default = MediaManager;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isMergeableObject = function isMergeableObject(value) {
	return isNonNullObject(value)
		&& !isSpecial(value)
};

function isNonNullObject(value) {
	return !!value && typeof value === 'object'
}

function isSpecial(value) {
	var stringValue = Object.prototype.toString.call(value);

	return stringValue === '[object RegExp]'
		|| stringValue === '[object Date]'
		|| isReactElement(value)
}

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
	return value.$$typeof === REACT_ELEMENT_TYPE
}

function emptyTarget(val) {
    return Array.isArray(val) ? [] : {}
}

function cloneIfNecessary(value, optionsArgument) {
    var clone = optionsArgument && optionsArgument.clone === true;
    return (clone && isMergeableObject(value)) ? deepmerge(emptyTarget(value), value, optionsArgument) : value
}

function defaultArrayMerge(target, source, optionsArgument) {
    var destination = target.slice();
    source.forEach(function(e, i) {
        if (typeof destination[i] === 'undefined') {
            destination[i] = cloneIfNecessary(e, optionsArgument);
        } else if (isMergeableObject(e)) {
            destination[i] = deepmerge(target[i], e, optionsArgument);
        } else if (target.indexOf(e) === -1) {
            destination.push(cloneIfNecessary(e, optionsArgument));
        }
    });
    return destination
}

function mergeObject(target, source, optionsArgument) {
    var destination = {};
    if (isMergeableObject(target)) {
        Object.keys(target).forEach(function(key) {
            destination[key] = cloneIfNecessary(target[key], optionsArgument);
        });
    }
    Object.keys(source).forEach(function(key) {
        if (!isMergeableObject(source[key]) || !target[key]) {
            destination[key] = cloneIfNecessary(source[key], optionsArgument);
        } else {
            destination[key] = deepmerge(target[key], source[key], optionsArgument);
        }
    });
    return destination
}

function deepmerge(target, source, optionsArgument) {
    var sourceIsArray = Array.isArray(source);
    var targetIsArray = Array.isArray(target);
    var options = optionsArgument || { arrayMerge: defaultArrayMerge };
    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

    if (!sourceAndTargetTypesMatch) {
        return cloneIfNecessary(source, optionsArgument)
    } else if (sourceIsArray) {
        var arrayMerge = options.arrayMerge || defaultArrayMerge;
        return arrayMerge(target, source, optionsArgument)
    } else {
        return mergeObject(target, source, optionsArgument)
    }
}

deepmerge.all = function deepmergeAll(array, optionsArgument) {
    if (!Array.isArray(array) || array.length < 2) {
        throw new Error('first argument should be an array with at least two elements')
    }

    // we are sure there are at least 2 values, so it is safe to have no initial value
    return array.reduce(function(prev, next) {
        return deepmerge(prev, next, optionsArgument)
    })
};

var deepmerge_1 = deepmerge;

module.exports = deepmerge_1;


/***/ }),
/* 2 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSelector = exports.createClassSelector = exports.mergeSelectors = exports.addClassesToNode = undefined;

var _array = __webpack_require__(4);

var _typeof = __webpack_require__(5);

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var selectorTypeIndicators = ['.', '#'];

var addClassesToNode = exports.addClassesToNode = function addClassesToNode(node, classes) {
  var _node$classList;

  classes = (0, _array.toArray)(classes);
  (_node$classList = node.classList).add.apply(_node$classList, _toConsumableArray(classes));

  return node;
};

var startsWithSelectorTypeIndicator = function startsWithSelectorTypeIndicator(selector) {
  return selectorTypeIndicators.filter(function (x) {
    return selector.startsWith(x);
  }).length > 0;
};

var mergeSelectors = exports.mergeSelectors = function mergeSelectors(classes) {
  return classes.join('');
};

var createClassSelector = exports.createClassSelector = function createClassSelector(selector) {
  if ((0, _typeof.isString)(selector)) {
    return startsWithSelectorTypeIndicator(selector) ? selector : '.' + selector;
  }

  return selector.map(function (c) {
    return startsWithSelectorTypeIndicator(c) ? c : '.' + c;
  });
};

var createSelector = exports.createSelector = function createSelector(classes) {
  return mergeSelectors(createClassSelector((0, _array.toArray)(classes)));
};

exports.default = { addClassesToNode: addClassesToNode, mergeSelectors: mergeSelectors, createClassSelector: createClassSelector };

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var toArray = exports.toArray = function toArray(items) {
  return typeof items === 'string' ? [items] : items;
};

exports.default = { toArray: toArray };

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var isString = exports.isString = function isString(object) {
  return typeof object === 'string';
};

exports.default = { isString: isString };

/***/ })
/******/ ]);
});
//# sourceMappingURL=media-manager.min.js.map